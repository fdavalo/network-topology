apiVersion: apps/v1
kind: Deployment
metadata:
  name: watch-resources-pods-{{ .Values.version }}
  labels:
    app: watch-resources-pods-{{ .Values.version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: watch-resources-pods-{{ .Values.version }}
  template:
    metadata:
      labels:
        app: watch-resources-pods-{{ .Values.version }}
    spec:
      serviceAccountName: watch-all
      containers:
      - name: pods
        image: quay.io/fdavalo/net-topology-web:{{ .Values.tag.web }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        args: ['npm', 'run', 'watch-pods']
        volumeMounts:
        - name: ca
          mountPath: '/run/ca'
          readOnly: true
      volumes:
      - name: ca
        secret:
          secretName: ca
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: watch-resources-services-{{ .Values.version }}
  labels:
    app: watch-resources-services-{{ .Values.version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: watch-resources-services-{{ .Values.version }}
  template:
    metadata:
      labels:
        app: watch-resources-services-{{ .Values.version }}
    spec:
      serviceAccountName: watch-all
      containers:
      - name: services
        image: quay.io/fdavalo/net-topology-web:{{ .Values.tag.web }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        args: ['npm', 'run', 'watch-services']
        volumeMounts:
        - name: ca
          mountPath: '/run/ca'
          readOnly: true
      volumes:
      - name: ca
        secret:
          secretName: ca
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: watch-resources-nodes-{{ .Values.version }}
  labels:
    app: watch-resources-nodes-{{ .Values.version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: watch-resources-nodes-{{ .Values.version }}
  template:
    metadata:
      labels:
        app: watch-resources-nodes-{{ .Values.version }}
    spec:
      serviceAccountName: watch-all
      containers:
      - name: services
        image: quay.io/fdavalo/net-topology-web:{{ .Values.tag.web }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        args: ['npm', 'run', 'watch-nodes']
        volumeMounts:
        - name: ca
          mountPath: '/run/ca'
          readOnly: true
      volumes:
      - name: ca
        secret:
          secretName: ca
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: watch-resources-networkconfig-{{ .Values.version }}
  labels:
    app: watch-resources-networkconfig-{{ .Values.version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: watch-resources-networkconfig-{{ .Values.version }}
  template:
    metadata:
      labels:
        app: watch-resources-networkconfig-{{ .Values.version }}
    spec:
      serviceAccountName: watch-all
      containers:
      - name: services
        image: quay.io/fdavalo/net-topology-web:{{ .Values.tag.web }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        args: ['npm', 'run', 'watch-networkconfig']
        volumeMounts:
        - name: ca
          mountPath: '/run/ca'
          readOnly: true
      volumes:
      - name: ca
        secret:
          secretName: ca
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: watch-flows-{{ .Values.version }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: watch-flows-{{ .Values.version }}
spec:
  selector:
    matchLabels:
      app: watch-flows-{{ .Values.version }}
  template:
    metadata:
      labels:
        app: watch-flows-{{ .Values.version }}
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: watch-all
      initContainers:
      - name: pipes
        image: registry.access.redhat.com/ubi8-minimal:latest 
        args: ['sh', '/run/shared/init.sh']
        volumeMounts:
        - name: shared
          mountPath: '/var/shared'
        - name: config-volume
          mountPath: '/run/shared'
      containers:
      - name: flows
        image: quay.io/fdavalo/net-topology-web:{{ .Values.tag.web }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.daemon_port }} 
        args: ['npm', 'run', 'watch-flows', '{{ .Values.daemon_port }}']
        securityContext:
          privileged: true
        volumeMounts:
        - name: shared
          mountPath: '/var/shared'
      - name: accept
        image: quay.io/fdavalo/utils:bcc
        args: ['sh', '/run/shared/accept.sh']
        volumeMounts:
        - name: shared
          mountPath: '/var/shared'
        - name: config-volume
          mountPath: '/run/shared'
      - name: connect
        image: quay.io/fdavalo/utils:bcc
        args: ['sh', '/run/shared/connect.sh']
        volumeMounts:
        - name: shared 
          mountPath: '/var/shared'
        - name: config-volume
          mountPath: '/run/shared'
      volumes:
      - name: shared
        emptyDir: {}
      - name: config-volume
        configMap:
          name: watch-flows 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: net-topology-web-{{ .Values.version }}
  labels:
    app: net-topology-web-{{ .Values.version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: net-topology-web-{{ .Values.version }}
  template:
    metadata:
      labels:
        app: net-topology-web-{{ .Values.version }}
    spec:
      serviceAccountName: watch-all
      containers:
      - name: web
        image: quay.io/fdavalo/net-topology-web:{{ .Values.tag.web }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        args: ['sh', 'start.sh']
        env:
        - name: DAEMON_PORT
          value: "{{ .Values.daemon_port }}"          
